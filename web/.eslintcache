[{"/app/src/index.tsx":"1","/app/src/reportWebVitals.ts":"2","/app/src/App.tsx":"3"},{"size":500,"mtime":1609966933419,"results":"4","hashOfConfig":"5"},{"size":425,"mtime":1609966933419,"results":"6","hashOfConfig":"5"},{"size":4896,"mtime":1609966933418,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"8r7mmk",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/app/src/index.tsx",[],["16","17"],"/app/src/reportWebVitals.ts",[],"/app/src/App.tsx",["18","19"],"import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { Button, Card, Container, Divider, List, ListItem, TextField } from '@material-ui/core';\nimport { access } from 'fs';\n\ninterface Customer {\n  id?: number;\n  first_name: string;\n  last_name: string;\n  email_address: string;\n  phone_number?: string;\n}\n\nfunction App() {\n\n  const [newCustomer, setNewCustomer] = useState({first_name: '', last_name: '', email_address: '', phone_number: ''} as Customer);\n  const [customers, setCustomers] = useState([] as Array<Customer>);\n  const [canSubmit, setCanSubmit] = useState(false);\n  const [formErr, setFormErr] = useState('');\n  const [accessToken, setAccessToken] = useState(null);\n\n  // Get customers\n  useEffect(() => {\n    console.debug('Getting Customers...');\n    getCustomers();\n  }, []);\n\n  useEffect(() => {\n    const firstNameTest = () => !!newCustomer.first_name;\n    const lastNameTest = () => !!newCustomer.last_name;\n    const emailTest = () => !!newCustomer.email_address;\n    const tests: Array<any> = [firstNameTest, lastNameTest, emailTest];\n    const isValid: boolean = tests\n      .map(test => test())\n      .reduce((prev, cur) => prev && cur);\n    setCanSubmit(isValid);\n  }, [newCustomer]);\n\n  const login = async () => {\n    fetch(`http://localhost:3000/login`, {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: 'tenant',\n        password: 'tenant123'\n      })\n    })\n    .then(response => response.json())\n    .then(data => setAccessToken(data.accessToken))\n    .catch(err => console.error('There was a problem logging in', err));\n  }\n\n  const getCustomers = async () => {\n    return await fetch(`http://localhost:3000/customers`)\n      .then(response => response.json())\n      .then(data => setCustomers(data))\n      .catch(error => console.error(error));\n  }\n\n  const addCustomer = () => {\n    console.debug('Adding Customer');\n    fetch(`http://localhost:3000/customers`, {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': accessToken ? `Bearer ${accessToken}` : ''\n      },\n      body: JSON.stringify(newCustomer)\n    })\n    .then(response => {\n      getCustomers();\n      setNewCustomer({first_name: '', last_name: '', email_address: '', phone_number: ''})\n    })\n    .catch(error => setFormErr('There was a problem adding customer!'));\n  }\n\n  return (\n    <div className=\"App\">\n      <Container maxWidth=\"sm\">\n        <Card>\n          <Button variant=\"contained\" color=\"primary\" onClick={login}>\n            Authenticate user as Admin\n          </Button>\n        </Card>\n      </Container>\n      <Container maxWidth=\"sm\">\n      <Card className=\"customer-form\">\n        <form action=\"\" className=\"customer-form\">\n          <h3>Create new Customer</h3>\n          {formErr && <h6>{formErr}</h6>}\n          {!accessToken && <h6>Click the authenticate button to get a token</h6>}\n          {/* First Name */}\n          <TextField id=\"form-first-name\" \n            label=\"First Name\"\n            variant=\"outlined\"\n            value={newCustomer.first_name}\n            onChange={event => setNewCustomer({...newCustomer, first_name: event.target.value})} />\n          \n          {/* Last Name */}\n          <TextField id=\"form-last-name\"\n            label=\"Last Name\"\n            variant=\"outlined\"\n            value={newCustomer.last_name} \n            onChange={event => setNewCustomer({...newCustomer, last_name: event.target.value})} />\n          \n          {/* Email */}\n          <TextField id=\"form-email\"\n            label=\"Email\"\n            variant=\"outlined\"\n            type=\"email\"\n            value={newCustomer.email_address}\n            onChange={event => setNewCustomer({...newCustomer, email_address: event.target.value})} />\n          \n          {/* Phone Number */}\n          <TextField id=\"form-phone\"\n            label=\"Phone Number\"\n            variant=\"outlined\"\n            type=\"phone\"\n            value={newCustomer.phone_number}\n            onChange={event => setNewCustomer({...newCustomer, phone_number: event.target.value})} />\n          \n          {/* Submit */}\n          <Button variant=\"contained\" disabled={!canSubmit} onClick={addCustomer}>Submit</Button>\n        </form>\n      </Card>\n      <List>\n        {customers && customers.map(customer => (\n          <>\n            <Card className=\"hover\">\n              <ListItem key={`li-${customer.id}`}>\n                Name: {customer.last_name}, {customer.first_name}<br />\n                Email: {customer.email_address} <br />\n                Phone: {customer.phone_number}\n              </ListItem>\n            </Card>\n            <Divider />\n          </>\n        ))}\n      </List>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":2,"column":8,"nodeType":"26","messageId":"27","endLine":2,"endColumn":12},{"ruleId":"24","severity":1,"message":"28","line":6,"column":10,"nodeType":"26","messageId":"27","endLine":6,"endColumn":16},"no-native-reassign",["29"],"no-negated-in-lhs",["30"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'access' is defined but never used.","no-global-assign","no-unsafe-negation"]